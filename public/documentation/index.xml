<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Documentation on Linux PTP Project</title><link>https://qqq.linuxptp.org/documentation/</link><description>Recent content in Documentation on Linux PTP Project</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 14 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://qqq.linuxptp.org/documentation/index.xml" rel="self" type="application/rss+xml"/><item><title>ptp4l(8): PTP Boundary/Ordinary/Transparent Clock</title><link>https://qqq.linuxptp.org/documentation/ptp4l/</link><pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate><guid>https://qqq.linuxptp.org/documentation/ptp4l/</guid><description>ptp4l(8): PTP Boundary/Ordinary/Transparent Clock SYNOPSIS ptp4l [ -AEP246HSLmqsv ] [ -f config ] [ -p phc-device ] [ -l print-level ] [ -i interface ] [ long-options ] &amp;hellip;
DESCRIPTION ptp4l is an implementation of the Precision Time Protocol (PTP) according to IEEE standard 1588 for Linux. It implements Boundary Clock (BC), Ordinary Clock (OC), and Transparent Clock (TC).
OPTIONS -A Select the delay mechanism automatically. Start with E2E and switch to P2P when a peer delay request is received.</description></item><item><title>timemaster(8): run NTP with PTP as reference clocks</title><link>https://qqq.linuxptp.org/documentation/timemaster/</link><pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate><guid>https://qqq.linuxptp.org/documentation/timemaster/</guid><description>timemaster(8): run NTP with PTP as reference clocks SYNOPSIS timemaster [ -nmqv ] [ -l print-level ] -f file
DESCRIPTION timemaster is a program that uses ptp4l and phc2sys in combination with chronyd or ntpd to synchronize the system clock to NTP and PTP time sources. The PTP time is provided by phc2sys and ptp4l via SHM reference clocks tochronyd/ntpd, which can compare all time sources and use the best sources to synchronize the system clock.</description></item><item><title>ts2phc(8): Synchronizes one or more PTP Hardware Clocks using external time stamps</title><link>https://qqq.linuxptp.org/documentation/ts2phc/</link><pubDate>Sun, 18 Jul 2021 00:00:00 +0000</pubDate><guid>https://qqq.linuxptp.org/documentation/ts2phc/</guid><description>ts2phc(8): Synchronizes one or more PTP Hardware Clocks using external time stamps SYNOPSIS ts2phc [ -hmqv ] [ -c device|name ] [ -f config ] [ -l print-level ] [ -s device|name ] [ long-options ] &amp;hellip;
DESCRIPTION ts2phc synchronizes PTP Hardware Clocks (PHC) to external time stamp signals. A single source may be used to distribute time to one or more PHC devices.
OPTIONS -c device|name) Specifies a PHC to be synchronized.</description></item><item><title>phc2sys(8): synchronize two or more clocks</title><link>https://qqq.linuxptp.org/documentation/phc2sys/</link><pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate><guid>https://qqq.linuxptp.org/documentation/phc2sys/</guid><description>phc2sys(8): synchronize two or more clocks SYNOPSIS phc2sys -a [ -r ] [ -r ] [ -f config-file ] [ options ] [ long-options ]
phc2sys [ -f config-file ] [ -d pps-device ] [ -s device ] [ -c device ] [ -O offset ] [ -w ] [ options ] [ long-options ] &amp;hellip;
DESCRIPTION phc2sys is a program which synchronizes two or more clocks in the system. Typically, it is used to synchronize the system clock to a PTP hardware clock (PHC), which itself is synchronized by the ptp4l(8) program.</description></item><item><title>phc_ctl(8): directly control PHC device clock</title><link>https://qqq.linuxptp.org/documentation/phc_ctl/</link><pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate><guid>https://qqq.linuxptp.org/documentation/phc_ctl/</guid><description>phc_ctl(8): directly control PHC device clock SYNOPSIS phc_ctl [ options ] &amp;lt;device&amp;gt; [ commands ]
DESCRIPTION phc_ctl is a program which can be used to directly control a PHC clock device. Typically, it is used for debugging purposes, and has little use for general control of the device. For general control of PHC clock devices, phc2sys(8) should be preferred.
&amp;lt;device&amp;gt; may be either CLOCK_REALTIME, any /dev/ptpX device, or any ethernet device which supports ethtool&amp;rsquo;s get_ts_info ioctl.</description></item><item><title>pmc(8): PTP management client</title><link>https://qqq.linuxptp.org/documentation/pmc/</link><pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate><guid>https://qqq.linuxptp.org/documentation/pmc/</guid><description>pmc(8): PTP management client SYNOPSIS pmc [ -f config-file ] [ -2 | -4 | -6 | -u ] [ -b boundary-hops ] [ -d domain-number ] [ -i interface ] [ -s uds-address ] [ -t transport-specific-field ] [ long-options ] [ -v ] [ -z ] [ command ] &amp;hellip;
DESCRIPTION pmc is a program which implements a PTP management client according to IEEE standard 1588. The program reads from the standard input or from the command line actions specified by name and management ID, sends them over the selected transport and prints any received replies.</description></item><item><title>nsm(8): NetSync Monitor client</title><link>https://qqq.linuxptp.org/documentation/nsm/</link><pubDate>Fri, 05 Jul 2019 00:00:00 +0000</pubDate><guid>https://qqq.linuxptp.org/documentation/nsm/</guid><description>nsm(8): NetSync Monitor client SYNOPSIS nsm [ -f config ] [ -i interface ] [ long-options ] [ command ] &amp;hellip;
DESCRIPTION nsm is a program which implements a NetSync Monitor (NSM) client. NSM is an extension to the Precision Time Protocol (PTP), which enables a client to measure the offset of its clock against any PTP clock in the network which supports NSM. It uses unicast messages, but unlike PTP in the unicast mode it does not require the server to keep any state specific to the client.</description></item><item><title>hwstamp_ctl(8): set time stamping policy at the driver level</title><link>https://qqq.linuxptp.org/documentation/hwstamp_ctl/</link><pubDate>Wed, 04 Jun 2014 00:00:00 +0000</pubDate><guid>https://qqq.linuxptp.org/documentation/hwstamp_ctl/</guid><description>hwstamp_ctl(8): set time stamping policy at the driver level SYNOPSIS hwstamp_ctl -i interface [ -r rx-filter ] [ -t tx-type ]
DESCRIPTION hwstamp_ctl is a program used to set and get the hardware time stamping policy at the network driver level with the SIOCSHWTSTAMP ioctl(2). The tx-type and rx-filter values are hints to the driver what it is expected to do. If the requested fine-grained filtering for incoming packets is not supported, the driver may time stamp more than just the requested types of packets.</description></item><item><title>Default Configuration Parameters</title><link>https://qqq.linuxptp.org/documentation/default/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qqq.linuxptp.org/documentation/default/</guid><description>Default Configuration Parameters The following tables summarize the default configuration values found in default.cfg. Refer to ptp4l(8) for a complete listing of all configuration options.
Default Program and Clock Options Option Default Value Description clientOnly 0 The local clock is a client-only clock if enabled (1).
The default is disabled (0). clockAccuracy 0xFE Used in the PTP server selection algorithm. clockClass 248 Denotes the traceability of the time distributed by the grandmaster clock.</description></item></channel></rss>